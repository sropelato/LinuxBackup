#!/bin/bash

# check if duplicity command exists
if [ ! `which duplicity` > /dev/null ]
then
	echo "The command duplicity does not exist. Please install duplicity first and then run $0 again." 1>&2
	exit 1
fi

# check number of arguments
if [ $# -lt 1 -o $# -gt 2 ]
then
	echo "Usage:    $0 config_file [ -f ]" 1>&2
	echo "Options:  -f: force full backup" 1>&2
	echo "Examples: $0 -f /var/lib/backup/cfg/myconfig" 1>&2
	exit 1
fi

config=`readlink -f $1`

# read config file
if [ -n "$config" -a -x $config ]
then
	. $config
else
	echo "The config file $config does not exist or is not executable." 1>&2
	exit 1
fi

# redirect all output to log file
if [ -n "$logfile" ]
then
	if [ ! -d `dirname "$logfile"` ]
	then
		mkdir -p `dirname "$logfile"`
	fi

	touch $logfile
	chmod 700 $logfile
	
	if [ 0 -ne $? ]
	then
		echo "Error creating or updating logfile: $logfile. Make sure it is in a location where the user running the backup has write privileges." 1>&2
		exit 1
	fi
	
	exec > $logfile 2>&1
else
	echo "logfile must be set." 1>&2
	exit 1
fi

# check if another duplicity job is currently running
if [ -n "`ps -ef | grep 'duplicity.*--no-encryption' | grep -v grep`" ]
then
	echo "Another duplicity job is still running. Aborting."
	exit 0
fi

# check if full backup is required
for arg in "$@"
do
    if [ $arg = "-f" ]
	then
		fullbackup=true
	fi
done

# prepare html document for status email
summary="<!DOCTYPE html><html><body style=\"font-family:Helvetica\">"
summary="$summary\n<h2 style=\"color:#336699\">Backup summary `hostname` `date +\"%d %B %Y (%H:%M:%S)\"`</h2>"
summary="$summary\n<h3 style=\"color:#666666\">Config file: $config</h3>"

# perform and verify backup
if [ -n "$backupdir" ]
then
	exclude_string=""
	for i in ${exclude[@]}
	do
		exclude_string="$exclude_string --exclude $i"	
	done
	
	if [ -n "$fullbackup" ]
	then
		echo "Staring full backup..."
		duplicity full --no-encryption $exclude_string / file://$backupdir
		
		if [ 0 -ne $? ]
		then
			echo "Error running duplicity. Check logfile: $logfile" 1>&2
			exit 1
		fi
	else
		echo "Starting incremental backup..."
		duplicity --no-encryption $exclude_string / file://$backupdir

		if [ 0 -ne $? ]
		then
			echo "Error running duplicity. Check logfile: $logfile" 1>&2
			exit 1
		fi
	fi
	
	# remove old backups
	if [ -n "$keep_backups" -a -n "$fullbackup" ]
	then
		if [ "$keep_backups" -gt 0 ]
		then
			if [ "$keep_backups" -eq 1 ]
			then
				echo "Removing old backups. One backup chain will be kept."
			else
				echo "Removing old backups. $keep_backups backup chains will be kept."
			fi
			duplicity remove-all-but-n-full $keep_backups --no-encryption --force file://$backupdir
			
			if [ 0 -ne $? ]
			then
				echo "Error removing old backups. Check logfile: $logfile" 1>&2
				exit 1
			fi
		else
			echo "keep_backups, if set, must be greater than 0. The backup has been successful. However, please fix this before running the next full backup." 1>&2
		fi
	fi
	
	output="`duplicity collection-status file://$backupdir`"
	
	if [ 0 -ne $? ]
	then
		echo "Error getting duplicity status. Check logfile: $logfile" 1>&2
		exit 1
	fi
	
	echo -e "$output"
	summary="$summary\n<pre style=\"font-family:Courier New\">$output</pre>"
else
	echo "backupdir must be set." 1>&2
	exit 1
fi

summary="$summary\n</body></html>"

# send status email
if [ -n "$email" ]
then
	echo -e "$summary" | mail -a "Content-type: text/html;" -s "Backup summary `hostname`" $email
	
	if [ 0 -ne $? ]
	then
		echo "Error sending status mail. Check logfile: $logfile" 1>&2
		exit 1
	fi
fi

